{"version":3,"file":"index.js","sourceRoot":"/","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import { GoogleSpreadsheet } from 'google-spreadsheet';\nimport { Client, Intents } from 'discord.js';\nimport fs from 'fs';\nimport axios from 'axios';\nimport 'dotenv/config';\n\ninterface IEarlyBirdWallet {\n  id: string;\n  name: string;\n  address: string;\n}\n\ninterface IGiveaway {\n  id: string;\n  from: string;\n}\n\ninterface SolscanToken {\n  tokenAddress: string;\n  tokenAmount: {\n    amount: string;\n    decimals: number;\n    uiAmount: number;\n    uiAmountString: string;\n  };\n  tokenAccount: string;\n  tokenName: string;\n  tokenIcon: string;\n  rentEpoch: number;\n  lamports: number;\n  tokenSymbol: string;\n  priceUsdt: number;\n}\n\nconst { writeFile } = fs.promises;\n\nconst solanaRegExp = /^[1-9A-HJ-NP-Za-km-z]{32,44}$/;\nconst isSolanaAddress = (address: string): boolean => solanaRegExp.test(address);\n\nconst getGiveaways = async (): Promise<IGiveaway[]> => {\n  if (\n    !process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL_1 ||\n    !process.env.GOOGLE_PRIVATE_KEY_1 ||\n    !process.env.GOOGLE_GIVEAWAYS_SHEET_ID_1\n  ) {\n    throw new Error('GOOGLE_SERVICE_ACCOUNT_EMAIL_1, GOOGLE_PRIVATE_KEY_1 or GOOGLE_GIVEAWAYS_SHEET_ID_1 missing');\n  }\n\n  const doc = new GoogleSpreadsheet(process.env.GOOGLE_GIVEAWAYS_SHEET_ID_1);\n  const client_email = process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL_1;\n  const private_key = process.env.GOOGLE_PRIVATE_KEY_1.replace(/\\\\n/g, '\\n');\n\n  // Authorize\n  console.log('Authorizing with Google');\n  await doc.useServiceAccountAuth({\n    client_email,\n    private_key,\n  });\n\n  // Load the document\n  console.log('Loading giveaway spreadsheet');\n  await doc.loadInfo();\n  console.log('Giveaway spreadsheet loaded');\n\n  const rows = await doc.sheetsByIndex[0].getRows();\n  const giveaways: IGiveaway[] = [];\n\n  for (let i = 0; i < rows.length; i++) {\n    const row = rows[i];\n\n    giveaways.push({\n      id: row.id,\n      from: row.from,\n    });\n  }\n\n  return giveaways;\n};\n\nconst createQueue = async (): Promise<IEarlyBirdWallet[]> => {\n  if (!process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL_1 || !process.env.GOOGLE_PRIVATE_KEY_1 || !process.env.GOOGLE_SHEET_ID_1) {\n    throw new Error('GOOGLE_SERVICE_ACCOUNT_EMAIL_1, GOOGLE_PRIVATE_KEY_1 or GOOGLE_SHEET_ID_1 missing');\n  }\n\n  const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEET_ID_1);\n  const client_email = process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL_1;\n  const private_key = process.env.GOOGLE_PRIVATE_KEY_1.replace(/\\\\n/g, '\\n');\n\n  // Authorize\n  console.log('Authorizing with Google');\n  await doc.useServiceAccountAuth({\n    client_email,\n    private_key,\n  });\n\n  // Load the document\n  console.log('Loading spreadsheet');\n  await doc.loadInfo();\n  console.log('Spreadsheet loaded');\n\n  const sheet = doc.sheetsByIndex[0];\n\n  const queue: IEarlyBirdWallet[] = [];\n\n  setInterval(async () => {\n    const walletSubmission = queue.shift();\n\n    if (walletSubmission) {\n      try {\n        const { id, name, address } = walletSubmission;\n        const now = new Date();\n        const rows = await sheet.getRows();\n        const idx = rows.findIndex((row) => row.id === id);\n\n        if (idx > -1) {\n          // User already exists - update it\n          const row = rows[idx];\n          if (row.address !== address) {\n            console.log(`Updating user ${id} ${name} to wallet ${address}`);\n            row.name = name;\n            row.address = address;\n            row.updated = now.toISOString();\n            await row.save();\n          }\n        } else {\n          // Add user and their wallet\n          console.log(`Adding user ${id} ${name} with wallet ${address}`);\n          await sheet.addRow({\n            id,\n            name,\n            address,\n            created: now.toISOString(),\n          });\n        }\n      } catch (err: unknown) {\n        console.error(`${walletSubmission.id} ${walletSubmission.name} failed to save`);\n      }\n    }\n    // Run every 4 seconds\n  }, 4000);\n\n  return queue;\n};\n\nconst discordBot = async () => {\n  if (!process.env.DISCORD_TOKEN_1 || !process.env.DISCORD_SERVER_ID_1 || !process.env.DISCORD_WHITELIST_ROLE_ID_1) {\n    throw new Error('DISCORD_SERVER_ID_1, DISCORD_TOKEN_1 or DISCORD_WHITELIST_ROLE_ID_1 missing');\n  }\n\n  const TOKEN = process.env.DISCORD_TOKEN_1;\n  const SERVER_ID = process.env.DISCORD_SERVER_ID_1;\n  const WHITELIST_ROLE_ID = process.env.DISCORD_WHITELIST_ROLE_ID_1;\n\n  const client = new Client({\n    intents: [\n      Intents.FLAGS.GUILDS,\n      Intents.FLAGS.GUILD_MESSAGES,\n      Intents.FLAGS.GUILD_MEMBERS,\n      Intents.FLAGS.GUILD_PRESENCES,\n    ],\n  });\n\n  const queue = await createQueue();\n\n  client.on('ready', async () => {\n    console.log(`Logged in as ${client.user?.tag}!`);\n\n    // Check every 4 hours\n    setInterval(async () => {\n      try {\n        const giveaways = await getGiveaways();\n        const members = await client.guilds.cache.get(SERVER_ID)?.members.fetch();\n\n        if (members) {\n          for (let i = 0; i < giveaways.length; i++) {\n            const { id, from } = giveaways[i];\n            const member = members.get(id);\n\n            if (member && !member.roles.cache.some((role) => role.id === WHITELIST_ROLE_ID)) {\n              console.log(`Adding EarlyBird role to ${member.user.tag} from ${from}`);\n              member.roles.add(WHITELIST_ROLE_ID, `Giveaway from ${from}`);\n            }\n          }\n        }\n      } catch (err: unknown) {\n        console.error('Giveaway interval failed', err);\n      }\n    }, 240 * 60000);\n  });\n\n  client.on('messageCreate', async (msg) => {\n    const member = msg.member;\n\n    if (member) {\n      const content = msg.content.trim();\n      const [command, address] = content.split(' ').filter((v) => !!v);\n      const user = member.user;\n\n      if (member.roles.cache.some((role) => role.id === WHITELIST_ROLE_ID)) {\n        if (command === '!wallet') {\n          if (!address) {\n            msg.reply(\n              'Please provide Solana address. Example of correct command:\\n!wallet REPLACE_THIS_WITH_YOUR_ADDRESS',\n            );\n          } else if (!isSolanaAddress(address)) {\n            msg.reply('Invalid Solana address');\n          } else {\n            msg.react('👍');\n            queue.push({\n              id: user.id,\n              name: user.tag,\n              address,\n            });\n          }\n        } else if (content.startsWith('!wallet') && content.includes('\\n')) {\n          msg.reply(\n            \"Please don't use line breaks in your message. Example of correct command:\\n!wallet REPLACE_THIS_WITH_YOUR_ADDRESS\",\n          );\n        }\n      }\n\n      // Allow users to check their presale token balance\n      // if (process.env.PRESALE_TOKEN_ADDRESS_1) {\n      //   if (command === '!checkwallet') {\n      //     if (!address) {\n      //       msg.reply('Please provide Solana address. Example of correct command:\\n!checkwallet YOUR_ADDRESS');\n      //     } else if (!isSolanaAddress(address)) {\n      //       msg.reply('Invalid Solana address');\n      //     } else {\n      //       try {\n      //         const { data } = await axios.get<SolscanToken[]>('https://public-api.solscan.io/account/tokens', {\n      //           params: {\n      //             account: address,\n      //           },\n      //         });\n      //         const idx = data.findIndex((account) => account.tokenAddress === process.env.PRESALE_TOKEN_ADDRESS_1);\n      //         msg.reply(\n      //           idx > -1\n      //             ? `Presale Token Balance: ${data[idx].tokenAmount.amount}`\n      //             : \"That wallet doesn't have a Presale Token account\",\n      //         );\n      //       } catch (err: unknown) {\n      //         console.error('checkwallet error', err);\n      //         msg.reply('Request to Solana failed. Please try again later!');\n      //       }\n      //     }\n      //   } else if (content.startsWith('!checkwallet') && content.includes('\\n')) {\n      //     msg.reply(\n      //       \"Please don't use line breaks in your message. Example of correct command:\\n!checkwallet YOUR_ADDRESS\",\n      //     );\n      //   }\n      // }\n    }\n  });\n\n  client.login(TOKEN);\n};\n\nconst exportWallets = async () => {\n  if (!process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL_1 || !process.env.GOOGLE_PRIVATE_KEY_1 || !process.env.GOOGLE_SHEET_ID_1) {\n    throw new Error('GOOGLE_SERVICE_ACCOUNT_EMAIL_1, GOOGLE_PRIVATE_KEY_1 or GOOGLE_SHEET_ID_1 missing');\n  }\n\n  const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEET_ID_1);\n  const client_email = process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL_1;\n  const private_key = process.env.GOOGLE_PRIVATE_KEY_1.replace(/\\\\n/g, '\\n');\n\n  const tokensPerWallet = 3;\n\n  // Authorize\n  console.log('Authorizing with Google');\n  await doc.useServiceAccountAuth({\n    client_email,\n    private_key,\n  });\n\n  // Load the document\n  console.log('Loading spreadsheet');\n  await doc.loadInfo();\n\n  const rows = await doc.sheetsByIndex[0].getRows();\n  const wallets = [];\n\n  for (let i = 0; i < rows.length; i++) {\n    const row = rows[i];\n\n    if (row.address?.length && isSolanaAddress(row.address)) {\n      wallets.push([row.address, tokensPerWallet]);\n    }\n  }\n\n  await writeFile('./wallets.json', JSON.stringify(wallets));\n};\n\ndiscordBot();\n\n// exportWallets();\n"]}